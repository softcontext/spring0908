<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="true"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- Spring # DataSource [JDBC # Connection] -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<context:property-placeholder
		location="classpath:jdbc.properties" />

	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource"/>
	</bean>

	<context:component-scan
		base-package="com.example.team" />




	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	

	<!-- 
		트랜잭션 어드바이스 어라운드 어드바이스여야 하고 
		그 코드는 누가 짜도 똑 같기 때문에 설정정보만 주면 스프링이 알아서 코딩한다. -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 트랜잭션 속성의 기본 설정 그대로 적용하는 예 -->
			<!-- 
				Exception(Checked Exception)
					try-catch가 강제되므로 개발자가 예외처리를 한단고 판단
					스프링은 커밋을 수행한다.
				RuntimeException(Unchecked Exception)
					try-catch가 강제되지 않으므로 개발자가 예외처리를 못했을 수도 있다고 판단
					스프링은 롤백을 수행한다.
					스프링 JDBC는 수 많은 데이터베이스가 던지는 예외를
					예외전환 서비스로직으로 처리하여 Checked Exception을
					Unchecked Exception으로 바꾸어 재 throw 합니다.
			 -->
			<tx:method name="insert*" 
				isolation="DEFAULT"
				propagation="REQUIRED"
				read-only="false"
				timeout="-1"
				rollback-for="RuntimeException"/>
			<!-- 필요 시 트랜잭션 속성을 변경해서 사용 -->
			<tx:method name="find*" 
				read-only="true"
				timeout="10"
				rollback-for="Exception"
				no-rollback-for="ArithmeticException"/>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="search*" read-only="true"/>
			<tx:method name="select*" read-only="true"/>
		</tx:attributes>
	</tx:advice>



	<!-- @Transactional 사용 통보 -->
	<!-- <tx:annotation-driven 
		transaction-manager="transactionManager" 
		proxy-target-class="false"/> -->

	<aop:config>
		<aop:pointcut 
			expression="execution(* com.example.team.dao.EmpDaoImpl.*(..))" 
			id="txPointcut"/>
		
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>

</beans>





